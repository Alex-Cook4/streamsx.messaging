/*******************************************************************************
 * Licensed Materials - Property of IBM
 * Copyright IBM Corp. 2014
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with
 * IBM Corp.
 *******************************************************************************/

/* Generated by Streams Studio: 28 February, 2014 12:15:29 PM EST */
package com.ibm.streamsx.messaging.mqtt;


import java.io.InputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.log4j.Logger;

import com.ibm.streams.operator.AbstractOperator;
import com.ibm.streams.operator.OperatorContext;
import com.ibm.streams.operator.StreamingData.Punctuation;
import com.ibm.streams.operator.StreamingInput;
import com.ibm.streams.operator.Tuple;
import com.ibm.streams.operator.log4j.TraceLevel;
import com.ibm.streams.operator.model.InputPortSet;
import com.ibm.streams.operator.model.InputPortSet.WindowMode;
import com.ibm.streams.operator.model.InputPortSet.WindowPunctuationInputMode;
import com.ibm.streams.operator.model.InputPorts;
import com.ibm.streams.operator.model.Libraries;
import com.ibm.streams.operator.model.Parameter;
import com.ibm.streams.operator.model.PrimitiveOperator;
import com.ibm.streams.operator.types.Blob;

/**
 * Class for an operator that consumes tuples and does not produce an output stream. 
 * This pattern supports a number of input streams and no output streams. 
 * <P>
 * The following event methods from the Operator interface can be called:
 * </p>
 * <ul>
 * <li><code>initialize()</code> to perform operator initialization</li>
 * <li>allPortsReady() notification indicates the operator's ports are ready to process and submit tuples</li> 
 * <li>process() handles a tuple arriving on an input port 
 * <li>processPuncuation() handles a punctuation mark arriving on an input port 
 * <li>shutdown() to shutdown the operator. A shutdown request may occur at any time, 
 * such as a request to stop a PE or cancel a job. 
 * Thus the shutdown() may occur while the operator is processing tuples, punctuation marks, 
 * or even during port ready notification.</li>
 * </ul>
 * <p>With the exception of operator initialization, all the other events may occur concurrently with each other, 
 * which lead to these methods being called concurrently by different threads.</p> 
 */
@PrimitiveOperator(name="MQTTSink", namespace="com.ibm.streamsx.messaging.mqtt",
description="Java Operator MqttSinkOperator")
@InputPorts({@InputPortSet(description="Port that ingests tuples.", cardinality=1, optional=false, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious), @InputPortSet(description="Optional input ports", optional=true, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious)})
@Libraries(value = {"impl/lib/*"})
public class MqttSinkOperator extends AbstractOperator {
	 
	private static Logger TRACE = Logger.getLogger(MqttSinkOperator.class);

	
	// Parameters
	private String topic;
	private int qos = 0;
	private String serverUri;
	private int reconnectionBound = 5;		// default 5, 0 = no retry, -1 = infinite retry
	private float period = 5000;
	private boolean retain = false;

	private MqttClientWrapper mqttWrapper;
	
	private ArrayBlockingQueue<Tuple> tupleQueue;
	private ExecutorService exService;
	private boolean shutdown;
	
	private class PublishRunnable implements Runnable {

		@Override
		public void run() {
			while (!shutdown)
			{
				// publish tuple in the background thread
				// max 50 tuples in flight
				try {
					Tuple tuple = tupleQueue.take();
					Blob blockMsg = tuple.getBlob(0);
			        InputStream inputStream = blockMsg.getInputStream();
			        int length = (int) blockMsg.getLength();
			        byte[] byteArray = new byte[length];
			        inputStream.read(byteArray, 0, length);
			        mqttWrapper.publish(topic, qos, byteArray, retain);
					
				} catch (InterruptedException e) {
				
				} catch (Exception e) {

				}
			}			
		}
		
	}
	
    /**
     * Initialize this operator. Called once before any tuples are processed.
     * @param context OperatorContext for this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
	@Override
	public synchronized void initialize(OperatorContext context)
			throws Exception {
    	// Must call super.initialize(context) to correctly setup an operator.
		super.initialize(context);
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " initializing in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
        
       tupleQueue = new ArrayBlockingQueue<Tuple>(50);
       exService = Executors.newFixedThreadPool(2, context.getThreadFactory());
        
       mqttWrapper = new MqttClientWrapper();
       mqttWrapper.setBrokerUri(serverUri);
       mqttWrapper.connect(getReconnectionBound(), getPeriod());
	}

    /**
     * Notification that initialization is complete and all input and output ports 
     * are connected and ready to receive and submit tuples.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void allPortsReady() throws Exception {
    	// This method is commonly used by source operators. 
    	// Operators that process incoming tuples generally do not need this notification. 
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " all ports are ready in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
        
        exService.execute(new PublishRunnable());        
    }

    /**
     * Process an incoming tuple that arrived on the specified port.
     * @param stream Port the tuple is arriving on.
     * @param tuple Object representing the incoming tuple.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public void process(StreamingInput<Tuple> stream, Tuple tuple)  throws Exception {
    	
    	// if data port
    	if (stream.getPortNumber() == 0)
    	{
    		// put tuple to queue
    		tupleQueue.put(tuple);
    	}
    	
    	// else if control input port
    	else {
			TRACE.log(TraceLevel.DEBUG, "[Control Port:] Control Signal Received");

    		// handle control signal to switch server
    		try {
				Object object = tuple.getObject(0);
				TRACE.log(TraceLevel.DEBUG, "[Control Port:] object: " + object + " " + object.getClass().getName());

				if (object instanceof Map)
				{									
					Map map = (Map)object;
					Set keySet = map.keySet();
					for (Iterator iterator = keySet.iterator(); iterator
							.hasNext();) {
						Object key = (Object) iterator.next();
						TRACE.log(TraceLevel.DEBUG, "[Control Port:] " + key + " " + key.getClass());
						
						String serverUri = (String) map.get(key);						
						
						TRACE.log(TraceLevel.DEBUG, "[Control Port:] " + IMqttConstants.CONN_SERVERURI + ":" + serverUri);
					
						setServerUri(serverUri);
						mqttWrapper.setBrokerUri(serverUri);
						
						// disconnect only
						// when the publishh happens, the publish will detect that
						// the connection is lost
						// we will attempt to make the connection again before publishing
						// again
						mqttWrapper.disconnect();
						
					}
//					String serverUri = (String)((Map)object).get(new RString("connection.serverURI"));
//					
//					TRACE.log(TraceLevel.DEBUG, "[Control Port:] " + IMqttConstants.CONN_SERVERURI + ":" + serverUri);
//				
//					setServerUri(serverUri);
//					mqttWrapper.setBrokerUri(serverUri);
//					
//					// disconnect only
//					// when the publishh happens, the publish will detect that
//					// the connection is lost
//					// we will attempt to make the connection again before publishing
//					// again
//					mqttWrapper.disconnect();
				}
			} catch (Exception e) {
				TRACE.log(TraceLevel.ERROR, "Unable to convert attribute 0 to a map.");
			}
    	}
    }
    
    /**
     * Process an incoming punctuation that arrived on the specified port.
     * @param stream Port the punctuation is arriving on.
     * @param mark The punctuation mark
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public void processPunctuation(StreamingInput<Tuple> stream,
    		Punctuation mark) throws Exception {
    	// TODO: If window punctuations are meaningful to the external system or data store, 
    	// insert code here to process the incoming punctuation.
    }

    /**
     * Shutdown this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void shutdown() throws Exception {
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " shutting down in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() );
                
        shutdown = true;
        exService.shutdown();
        mqttWrapper.disconnect();
        mqttWrapper.shutdown();
        
        // Must call super.shutdown()
        super.shutdown();
    }

    @Parameter(name="topic", description="Topic to publish to.", optional=false)
	public void setTopics(String topic) {
		this.topic = topic;
	}

    @Parameter(name="qos", description="Qos to publish to.", optional=true)
	public void setQos(int qos) {
		this.qos = qos;
	}

    @Parameter(name="serverURI", description="Server to publish messages to.", optional=false)
	public void setServerUri(String serverUri) {
		this.serverUri = serverUri;
	}
	
	public String getTopics() {
		return topic;
	}

	public int getQos() {
		return qos;
	}

	public String getServerUri() {
		return serverUri;
	}
	
	@Parameter(name="reconnectionBound", description="Reconnection bound, 0 for no retry, n for n number of retries, -1 for inifinite retry.", optional=true)
	public void setReconnectionBound(int reconnectionBound) {
		this.reconnectionBound = reconnectionBound;
	}
	
	@Parameter(name="period", description="Reconnection period, default is 60 s.", optional=true)
	public void setPeriod(float period) {
		this.period = period;
	}
	
	public int getReconnectionBound() {
		return reconnectionBound;
	}
	
	public float getPeriod() {
		return period;
	}

	public boolean isRetain() {
		return retain;
	}

	@Parameter(name="retain", description="Indicates if messages should be retained on the MQTT server.  Default is false.", optional=true)
	public void setRetain(boolean retain) {
		this.retain = retain;
	}
	
	
    
}

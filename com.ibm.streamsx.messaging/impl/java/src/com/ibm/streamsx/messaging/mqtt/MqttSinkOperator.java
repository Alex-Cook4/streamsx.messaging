/*******************************************************************************
 * Licensed Materials - Property of IBM
 * Copyright IBM Corp. 2014
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with
 * IBM Corp.
 *******************************************************************************/

/* Generated by Streams Studio: 28 February, 2014 12:15:29 PM EST */
package com.ibm.streamsx.messaging.mqtt;


import java.io.InputStream;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.log4j.Logger;

import com.ibm.streams.operator.AbstractOperator;
import com.ibm.streams.operator.OperatorContext;
import com.ibm.streams.operator.OperatorContext.ContextCheck;
import com.ibm.streams.operator.StreamingData.Punctuation;
import com.ibm.streams.operator.StreamingInput;
import com.ibm.streams.operator.Tuple;
import com.ibm.streams.operator.compile.OperatorContextChecker;
import com.ibm.streams.operator.log4j.TraceLevel;
import com.ibm.streams.operator.model.InputPortSet;
import com.ibm.streams.operator.model.InputPortSet.WindowMode;
import com.ibm.streams.operator.model.InputPortSet.WindowPunctuationInputMode;
import com.ibm.streams.operator.model.OutputPortSet.WindowPunctuationOutputMode;
import com.ibm.streams.operator.model.InputPorts;
import com.ibm.streams.operator.model.Libraries;
import com.ibm.streams.operator.model.OutputPortSet;
import com.ibm.streams.operator.model.OutputPorts;
import com.ibm.streams.operator.model.Parameter;
import com.ibm.streams.operator.model.PrimitiveOperator;
import com.ibm.streams.operator.types.Blob;

/**
 * Class for an operator that consumes tuples and does not produce an output stream. 
 * This pattern supports a number of input streams and no output streams. 
 * <P>
 * The following event methods from the Operator interface can be called:
 * </p>
 * <ul>
 * <li><code>initialize()</code> to perform operator initialization</li>
 * <li>allPortsReady() notification indicates the operator's ports are ready to process and submit tuples</li> 
 * <li>process() handles a tuple arriving on an input port 
 * <li>processPuncuation() handles a punctuation mark arriving on an input port 
 * <li>shutdown() to shutdown the operator. A shutdown request may occur at any time, 
 * such as a request to stop a PE or cancel a job. 
 * Thus the shutdown() may occur while the operator is processing tuples, punctuation marks, 
 * or even during port ready notification.</li>
 * </ul>
 * <p>With the exception of operator initialization, all the other events may occur concurrently with each other, 
 * which lead to these methods being called concurrently by different threads.</p> 
 */
@PrimitiveOperator(name="MQTTSink", namespace="com.ibm.streamsx.messaging.mqtt",
description=SPLDocConstants.MQTT_SINK_OP_DESCRIPTION) 
@InputPorts({@InputPortSet(description="Port that ingests tuples.", cardinality=1, optional=false, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious), @InputPortSet(description="Optional input ports", optional=true, windowingMode=WindowMode.NonWindowed, windowPunctuationInputMode=WindowPunctuationInputMode.Oblivious)})
@OutputPorts({@OutputPortSet(description="Optional error output port.", cardinality=1, optional=true, windowPunctuationOutputMode=WindowPunctuationOutputMode.Free)})
@Libraries(value = {"opt/mqtt/*"} )
public class MqttSinkOperator extends AbstractOperator {
	 
	private static Logger TRACE = Logger.getLogger(MqttSinkOperator.class);
	
	// Parameters
	private String topic;
	private int qos = 0;
	private String serverUri;
	private int reconnectionBound = IMqttConstants.DEFAULT_RECONNECTION_BOUND;		// default 5, 0 = no retry, -1 = infinite retry
	private long period = IMqttConstants.DEFAULT_RECONNECTION_PERIOD;
	private boolean retain = false;
	private String topicAttributeName;
	private String qosAttributeName;

	private MqttClientWrapper mqttWrapper;
	
	private ArrayBlockingQueue<Tuple> tupleQueue;
	private ExecutorService exService;
	private boolean shutdown;
	
	private class PublishRunnable implements Runnable {

		@Override
		public void run() {
			while (!shutdown)
			{
				// publish tuple in the background thread
				// max 50 tuples in flight
				try {
					
					Tuple tuple = tupleQueue.take();	
					
					String pubTopic = topic;
					int msgQos = qos;
					
					if (topicAttributeName != null)
					{
						pubTopic = tuple.getString(topicAttributeName);
					}
					
					if (qosAttributeName != null)
					{
						msgQos = tuple.getInt(qosAttributeName);
					}
					
					if (pubTopic != null && pubTopic.length() > 0
						&& msgQos >= 0 && msgQos < 3){
						Blob blockMsg = tuple.getBlob(0);
				        InputStream inputStream = blockMsg.getInputStream();
				        int length = (int) blockMsg.getLength();
				        byte[] byteArray = new byte[length];
				        inputStream.read(byteArray, 0, length);
				        mqttWrapper.publish(pubTopic, msgQos, byteArray, retain);
					}
					else
					{
						TRACE.log(TraceLevel.ERROR, Messages.getString("MqttSinkOperator.0", pubTopic, msgQos)); //$NON-NLS-1$
					}
					
				} catch (InterruptedException e) {
					TRACE.log(TraceLevel.ERROR, "Unable to publish message",e);
				} catch (Exception e) {
					TRACE.log(TraceLevel.ERROR, "Unable to publish message", e);
				}
			}			
		}		
	}
	
	@ContextCheck(compile=true, runtime=false)
	public static boolean compileCheckTopic(OperatorContextChecker checker)
	{
		OperatorContext context = checker.getOperatorContext();
		
		// check the topic and topicAttributeName parameters are mutually exclusive
		boolean check = checker.checkExcludedParameters("topic", "topicAttributeName") && //$NON-NLS-1$ //$NON-NLS-2$
				checker.checkExcludedParameters("topicAttributeName", "topic"); //$NON-NLS-1$ //$NON-NLS-2$
		
		// check that at least one of topic or topicAttributeName parameter is specified
		Set<String> parameterNames = context.getParameterNames();		
		boolean hasTopic = parameterNames.contains("topic") || parameterNames.contains("topicAttributeName"); //$NON-NLS-1$ //$NON-NLS-2$
		
		if (!hasTopic)
		{
			checker.setInvalidContext(Messages.getString("MqttSinkOperator.7"), null); //$NON-NLS-1$
		}
		
		check = check & hasTopic;
		
		return check;
		
	}
	
    /**
     * Initialize this operator. Called once before any tuples are processed.
     * @param context OperatorContext for this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
	@Override
	public synchronized void initialize(OperatorContext context)
			throws Exception {
    	// Must call super.initialize(context) to correctly setup an operator.
		super.initialize(context);
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " initializing in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        
       tupleQueue = new ArrayBlockingQueue<Tuple>(50);
       exService = Executors.newFixedThreadPool(2, context.getThreadFactory());
        
       mqttWrapper = new MqttClientWrapper();
       mqttWrapper.setBrokerUri(serverUri);
       mqttWrapper.connect(getReconnectionBound(), getPeriod());
	}

    /**
     * Notification that initialization is complete and all input and output ports 
     * are connected and ready to receive and submit tuples.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void allPortsReady() throws Exception {
    	// This method is commonly used by source operators. 
    	// Operators that process incoming tuples generally do not need this notification. 
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " all ports are ready in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        
        exService.execute(new PublishRunnable());        
    }

    /**
     * Process an incoming tuple that arrived on the specified port.
     * @param stream Port the tuple is arriving on.
     * @param tuple Object representing the incoming tuple.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public void process(StreamingInput<Tuple> stream, Tuple tuple)  throws Exception {
    	
    	// if data port
    	if (stream.getPortNumber() == 0)
    	{
    		// put tuple to queue
    		tupleQueue.put(tuple);
    	}
    	
    	// else if control input port
    	else {
			TRACE.log(TraceLevel.DEBUG, "[Control Port:] Control Signal Received"); //$NON-NLS-1$

    		handleControlSignal(tuple);
    	}
    }

	private void handleControlSignal(Tuple tuple) {
		// handle control signal to switch server
		try {
			Object object = tuple.getObject(0);
			TRACE.log(TraceLevel.DEBUG, "[Control Port:] object: " + object + " " + object.getClass().getName()); //$NON-NLS-1$ //$NON-NLS-2$

			if (object instanceof Map)
			{									
				Map map = (Map)object;
				Set keySet = map.keySet();
				for (Iterator iterator = keySet.iterator(); iterator
						.hasNext();) {
					Object key = (Object) iterator.next();
					TRACE.log(TraceLevel.DEBUG, "[Control Port:] " + key + " " + key.getClass()); //$NON-NLS-1$ //$NON-NLS-2$
					
					String keyStr = key.toString();
					
					// case insensitive checks
					if (keyStr.toLowerCase().equals(IMqttConstants.CONN_SERVERURI.toLowerCase()))
					{
						Object serverUri = map.get(key);				
						
						String serverUriStr = serverUri.toString();
						
						// only handle if server URI has changed
						if (!serverUriStr.toLowerCase().equals(getServerUri().toLowerCase()))
						{						
							TRACE.log(TraceLevel.DEBUG, "[Control Port:] " + IMqttConstants.CONN_SERVERURI + ":" + serverUri); //$NON-NLS-1$ //$NON-NLS-2$
						
							setServerUri(serverUriStr);
							mqttWrapper.setBrokerUri(serverUriStr);
							
							// disconnect only
							// when the publish happens, the publish will detect that
							// the connection is lost
							// we will attempt to make the connection again before publishing
							// again
							mqttWrapper.disconnect();							
						}
					}					
				}
			}
		} catch (Exception e) {
			TRACE.log(TraceLevel.ERROR, Messages.getString("MqttSinkOperator.21")); //$NON-NLS-1$
		}
	}
    
    /**
     * Process an incoming punctuation that arrived on the specified port.
     * @param stream Port the punctuation is arriving on.
     * @param mark The punctuation mark
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public void processPunctuation(StreamingInput<Tuple> stream,
    		Punctuation mark) throws Exception {
    	// TODO: If window punctuations are meaningful to the external system or data store, 
    	// insert code here to process the incoming punctuation.
    }

    /**
     * Shutdown this operator.
     * @throws Exception Operator failure, will cause the enclosing PE to terminate.
     */
    @Override
    public synchronized void shutdown() throws Exception {
        OperatorContext context = getOperatorContext();
        Logger.getLogger(this.getClass()).trace("Operator " + context.getName() + " shutting down in PE: " + context.getPE().getPEId() + " in Job: " + context.getPE().getJobId() ); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                
        shutdown = true;
        exService.shutdown();
        mqttWrapper.disconnect();
        mqttWrapper.shutdown();
        
        // Must call super.shutdown()
        super.shutdown();
    }

    @Parameter(name="topic", description="Topic to publish to.  This parameter is mutually exclusive with the \\\"topicAttributeName\\\" parameter.", optional=true)
	public void setTopics(String topic) {
		this.topic = topic;
		
		if (topic.startsWith("$")) //$NON-NLS-1$
		{
			topicAttributeName = topic.substring(1);
		}
	}

    @Parameter(name="qos", description="Qos to publish to.", optional=true)
	public void setQos(int qos) {
		this.qos = qos;
	}

    @Parameter(name="serverURI", description="Server to publish messages to.", optional=false)
	public void setServerUri(String serverUri) {
		this.serverUri = serverUri;
	}
	
	public String getTopics() {
		return topic;
	}

	public int getQos() {
		return qos;
	}

	public String getServerUri() {
		return serverUri;
	}
	
	@Parameter(name="reconnectionBound", description="Reconnection bound, 0 for no retry, n for n number of retries, -1 for inifinite retry.", optional=true)
	public void setReconnectionBound(int reconnectionBound) {
		this.reconnectionBound = reconnectionBound;
	}
	
	@Parameter(name="period", description="Reconnection period in ms, default is 60000 ms.", optional=true)
	public void setPeriod(long period) {
		this.period = period;
	}
	
	public int getReconnectionBound() {
		return reconnectionBound;
	}
	
	public long getPeriod() {
		return period;
	}

	public boolean isRetain() {
		return retain;
	}

	@Parameter(name="retain", description="Indicates if messages should be retained on the MQTT server.  Default is false.", optional=true)
	public void setRetain(boolean retain) {
		this.retain = retain;
	}
	
	@Parameter(name="topicAttributeName", description="Attribute name that contains the topic to publish the message with.  This parameter is mutually exclusive with the \\\"topic\\\" parameter.", optional=true)
	public void setTopicAttrName(String topicAttr) {
		this.topicAttributeName = topicAttr;
	}
	
	public String getTopicAttrName() {
		return topicAttributeName;
	}
	
	@Parameter(name="qosAttributeName", description="Attribute name that contains the qos to publish the message with.  This parameter is mutually exclusive with the \\\"qos\\\" parameter.", optional=true)
	public void setQosAttributeName(String qosAttributeName) {
		this.qosAttributeName = qosAttributeName;
	}
	
	public String getQosAttributeName() {
		return qosAttributeName;
	}
	
	
    
}

/**
* **Connection specifications document**
*
* A connection specifications document is an XML document that describes how operators in the Messaging Toolkit connect to and access messaging systems. Each document contains a collection 
* of <connection_specification> elements and <access_specification> elements.
* 
* The relationship between connection specifications and access specifications is many-to-many. Operators can connect to the same messaging system (one connection specification) and access * several different queues or topics from that service (many access specifications). For example, an operator can connect to a single queue or a single topic in the messaging system.
* Alternatively, operators can access equivalent data (one access specification) from several different messaging systems (many connection specifications), for example, accessing data from
* both a test system and a production system.
* 
* When the SPL compiler encounters an operator declaration for an `XMSSink` and `XMSSource` operators, the compiler reads the connection specifications document that is named by
* **connectionDocument** parameter for that operator. If this parameter is not specified, the operator looks for a `../etc/connections.xml` file, where the path is relative to the data 
* directory. The compiler checks that the document conforms to the semantic rules of the XML schema that is defined for these documents. The SPL compiler uses the information that is given
* in the connection and access specifications to configure the operator. The compiler does not attempt to connect to the messaging system or access its data to verify correct configuration
* at compile time. The operators have run-time checks to validate configuration; if the configuration is incorrect these checks might result in runtime failures, which are captured in the
* processing element logs.
* 
* For `MQTTSink` and `MQTTSource` operators, the connection specifications document that is named by **connectionDocument** parameter contains only a <connection_specification>
* element. It does not contain an <access_specification> element. The **connectionDocument** parameter is not mandatory. You can specify the connection information as parameters to
* the operator.
* 
* The `JMSSource` and `JMSSink` operators parse the connection specifications document that is named by **connectionDocument** parameter at runtime. If this parameter is not specified, the
* operator looks for a `../etc/connections.xml` file, where the path is relative to the data directory.
* A valid connection specifications document consists of a connections root element which contains one <connection_specifications> element and one <access_specifications>
* element. These elements serve as containers for the connection specifications and access specifications. Here is an abridged example of a complete connection specifications document,
* with all <connection_specification> and <access_specification> elements omitted:
* 
*		<?xml version="1.0" encoding="UTF-8"?>
*		<st:connections xmlns:st="http://www.ibm.com/xmlns/prod/streams/adapters"
*		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
*		<connection_specifications>
*			.
*			.
*			.
*		</connection_specifications>
*		<access_specifications>
*			.
*			.
*			.
*		</access_specifications>
*		</st:connections>
*
* **Connection_specification element**
*
* A <connection_specifications> element is a sequence of zero or more <connection_specification> elements.
*
* Each <connection_specification> element has a single attribute, name. This name value is used in the **connection** parameter of Messaging Toolkit operators.
* 
* A <connection_specification> element must have exactly one element. For the Messaging Toolkit, this element is an XMS, JMS, or a MQTT element. Use the 
* following <connection_specification> elements for each of the Messaging Toolkit operators:
* * XMS: `XMSSink` and `XMSSource` operators
* * JMS: `JMSSink` and `JMSSource` operators
* * MQTT: `MQTTSink` and `MQTTSource` operators
*
* **JMS element** 
*
* The <JMS> element specifies the information that is needed by the `JMSSink` and `JMSSource` operators to establish a connection to messaging system.
* The following example shows connection specification that contains a <JMS> element:
*
*		<connection_specifications>
*			<connection_specification name="amqConn">
*			<JMS initial_context="org.apache.activemq.jndi.ActiveMQInitialContextFactory"
*				provider_url = "tcp://machinename.com:61616"
*				connection_factory = "ConnectionFactory"/>
*				user="user1"
*				password="password1"
*			</connection_specification>
*		</connection_specifications>
*
* The <JMS> element has the following attributes:
*
* * initial_context
*   * This mandatory attribute represents the class name of the factory class that creates an initial context. The following example shows the initial_context when the messaging provider is WebSphere MQ and it uses the `.bindings` file: `com.sun.jndi.fscontext.RefFSContextFactory`
*   * The following example shows the initial_context when the messaging provider is Apache ActiveMQ: `org.apache.activemq.jndi.ActiveMQInitialContextFactory`
* * provider_url
*   * This mandatory attribute is a URL that points to the directory service that contains the administered objects or the JNDI URL that stores the objects in the file system. The syntax of the URL varies based on the messaging provider.
*      * `file:///homes/abc/xyz/wef`: Use this format if your application sends data to or receive messages from a WebSphere MQ queue or topic. This format specifies that the administered objects are stored in a file called `.bindings`, which is in the `/homes/abc/xyz/wef` directory.
*      * `tcp://machinename.com:61616`: Use this format if your application sends data to or receives messages from Apache ActiveMQ.
* * connection_factory
*   * This mandatory attribute value is the name of the ConnectionFactory administered object. This administered object is within the directory service context that is specified by the initial_context attribute, and it is used to establish the connection. For applications that use Apache ActiveMQ, you can use the default administered object called ConnectionFactory.
* * user
*   * The value of the user attribute provides the user identification under which the connection to the messaging provider is attempted. This attribute is optional.
* * password
*   * The password attribute contains the authentication credentials (password) for the user ID. This attribute is optional.
*
* **MQTT element**
*
* The <MQTT> element specifies the information that is needed by the `MQTTSink` and `MQTTSource` operators to establish a connection with MQTT-based messaging systems.
*
* The following example shows a <connection specification> element that contains an <MQTT> element:
*
*		<connection_specifications>
*			<connection_specification name="mqttconn">
*			<MQTT serverURI="ssl://hostname:1883" trustStore="../../etc/trustFile.pem"/>
*			</connection_specification>
*		</connection_specifications>
*
* The <MQTT> element has the following attributes:
* * serverURI
*   * This required attribute specifies the URI of the MQTT server that you want to connect to. The serverURI has the following format: *protocol*://*hostname or IP address*:*portnumber*
*   * The supported protocols are SSL and TCP. By default, the protocol is set to `tcp`, and the operators use the TCP protocol to connect to an MQTT server.
*   * To use SSL authentication, set the protocol to ssl.  You must also specify a value for the following attributes based on the type of SSL authentication:
*     * For client SSL authentication, if a password is set for the keystore, set the keyStore and keyStorePassword attributes in the MQTT element.
*     * For server SSL authentication, set the trustStore attribute in teh MQTT element.
*     * For mutual SSL authentication, if a password is set for the keystore, set the trustStore, keyStore, and keyStorePassword attributes in the MQTT element.
*   * If you do not set the appropriate attributes, a run-time error occurs. 
* * trustStore
*   * This optional attribute specifies the name of the truststore file, which is in PEM format. You can specify an absolute path or a path that is relative to the data directory. The operator supports PEM files that use base64 encoding. The truststore file must contain the public certificates of all the trusted MQTT servers. If the truststore does not contain a public certificate for an MQTT server, the connection to that server is terminated.
* * keyStore
*   * This optional attribute specifies the name of the keystore file, which is in PEM format. The keystore file must contain the public certificate and the private key of the MQTT server that you want to connect to. If the keystore file does not exist, the operator terminates. The location of the keystore file can be absolute path or a path that is relative to the data directory.
* * keyStorePassword
*   * This optional attribute specifies the password for the keystore file. This attribute is specified when the keyStore attribute is specified and the keystore file it is protected by a password. If the keyStorePassword is invalid the operator terminates.
*
* **XMS element**
*
* The <XMS> element specifies the information that is needed by the `XMSSink` and `XMSSource` operators to establish a connection to messaging system. 
* The <XMS> element does not actually contain the information; rather, it references an XMS or JMS administered object, which is held in an external directory service. 
* The information about how to make the connection is held in this administered object.
*
* Here is an example connection specification that contains an <XMS> element:
*
*		<connection_specification name="wbe">
*			<XMS initial_context="file:///opt/InitialContext/" 
*				connection_factory="TestConFac" 
*				user="user1"
*				password="password1" />
*		</connection_specification>
* 
* The <XMS> element has four attributes:
* * initial_context
*   * This mandatory attribute value is a URL that points to the directory service that contains the administered objects. It uses the reference JNDI implementation, which stores objects in the file system. The syntax of the URL can take two forms:
*      * `file:///xxx/yyy/zzz`: This format specifies that the JNDI objects are stored in a file that is called `zzz`, which is in the directory `xxx/yyy`.
*      * `file:///xxx/yyy/`: This format specifies that the JNDI objects are stored in a file that is called `.bindings`, which is in the directory `xxx/yyy`. By default, the MQExplorer tool puts its entries in a file called `.bindings`.
* * connection_factory
*   * This mandatory attribute value is the name of the ConnectionFactory administered object. In particular, it is the administered object within the directory service context that is specified by the initial_context attribute, and it is used to make the connection.
* * user
*   * This optional attribute value provides the user identification that is used to connect to the messaging provider. 
* If this attribute is not specified, a NULL value is used for the corresponding parameter in the XMS connect() function call.
* * password
*   * This optional attribute value provides the authentication credentials (password) for the user ID. If this attribute is not specified, a NULL value is used for the corresponding parameter in the XMS `connect()` function call.
*
* **Access_specification element**
*
* A sequence of one or more <access_specification> elements make up an <access_specifications> element. 
* In the Messaging Toolkit, the <access_specification> element includes a <destination> element.
* 
* Each <access_specification> element has a single attribute, name. The name value can be specified in the access parameter of a Messaging Toolkit operator.
*
* **Note**: The `MQTTSource` and `MQTTSink` operators do not support the <access_specification> element.
*
* In the Messaging Toolkit, an <access_specification> element has:
* * A <destination> element;
* * One or more <uses_connection> elements;
* * No more than one <native_schema> element.
*
* **Destination element**
*
* The <destination> element specifies the queue or topic that is used by the Messaging Toolkit operators. 
* The element also specifies some parameters that control the behavior of the operator.
* 
* For WebSphere MQ, the <destination> element does not actually contain this information, 
* instead it specifies the information indirectly by referencing an XMS or JMS administered object that is held in an external directory service. 
* For Apache ActiveMQ, the <destination> element can directly refer to a queue or a topic.
* 
* The following example shows an access specification that contains a <destination> element for the WebSphere MQ messaging system:
*
*		<access_specifications>
*			<access_specification name="Outtrading22">
*				<destination identifier="TestDestination2" delivery_mode="persistent"
*				message_class="stream"/>
*				<uses_connection connection="wbe2" />
*				<native_schema>
*					<attribute name="cntr" type="Long"/>
*				</native_schema>
*			</access_specification>
*		</access_specifications>
*
* The following example shows an access specification that contains a <destination> element that directly refers to an ActiveMQ queue:
*
*		<access_specifications>
*			<access_specification name="amqAccess">
*				<destination identifier="dynamicQueues/MapQueue" 
*				delivery_mode="persistent" message_class="stream" />
*				<uses_connection connection="amqConn"/>
*				<native_schema>
*					<attribute name="cntr" type="Long" />
*				</native_schema>
*			</access_specification>
*		</access_specifications>
*
* The <destination> element has three attributes:
* * identifier
*   * This attribute value is the name of the destination administered object that is used. In particular, it is an administered object within the directory service context that is specified by the initial_context attribute in the connection specification. The destination administered object can be either a JMS queue object or a JMS topic object. This attribute is required.
*   * If the messaging provider is Apache ActiveMQ, this attribute can represent the queue or topic that must be created when accessing the messaging provider.
* * delivery_mode
*   * This attribute value specifies the quality of service that is applied by the messaging provider, if it is not overridden by the messaging provider administration. The value can be persistent or non_persistent, as defined by the JMS specification. If this attribute is not specified, the default value is non_persistent.
* * message_class
*   * This attribute value specifies how a stream tuple is serialized into a WebSphere� MQ or an Apache ActiveMQ message. It operates with the <native_schema> element. The value can be: bytes, empty, map, stream, wbe, wbe22, or xml.
*
* **Message class formats in the Messaging Toolkit**
*
* The message class specifies the type of XMS or JMS message that is output or expected by the operators in the Messaging Toolkit. 
* It also affects how the message payload is converted to tuples or vice versa.
*
* The Messaging Toolkit supports the following values for the message_class attribute in the <destination> element: bytes, empty, map, stream, wbe, wbe22, and xml.
*
* When the message_class attribute value is `bytes`:
* * The `XMSSink` operator constructs an XMS BytesMessage. The `JMSSink` operator constructs a JMS BytesMessage. The BytesMessage is a stream of binary data that contains values that are taken from the input stream. The values are serialized into the message in the order  that is specified in the <native_schema> element and they use the data types from that element.
*   * **Note**: The `XMSSink` operator can handle String and blob attributes that do not have lengths that are specified in the <native_schema> element.  The operator serializes such attributes directly into the BytesMessage, and uses the actual length of the attribute at run time.  For example, if the blob has three entries, then it uses up 3 bytes in the BytesMessage. If the <native_schema> element contains a length for a String  or blob attribute, then the `XMSSink` operator pads or truncates the run time attribute value to make it fit this length.  Blob attributes are padded with nulls and String attributes are padded with spaces.
*   * The `JMSSink` operator raises a runtime error if the <native_schema> element does not specify the length for all String and blob attributes or if a negative length other than -2 or -4 is specified. If the length is positive, the operator pads or truncates the run time attributes to make it fit this length.  Blob attributes are padded with null values and String attributes are padded with spaces. For String attributes, length is measured in number of bytes.
* * The `XMSSource` operator expects an XMS BytesMessage. The `JMSSource` operator expects a JMS BytesMessage. The BytesMessage contains the values of the elements that are listed in the <native_schema>.  The values of the elements must occur in the order that is specified in the <native_schema> element. The data types must match the types that are specified in the schema. If the data in the message is insufficient, the operator discards the entire message and logs a run time error. **Note**: The <native_schema> element must specify the length of all the String and blob attributes, unless the attribute is the final attribute in the <native_schema> element.
*   * If the attribute is the final attribute in the <native_schema> element and a length is not specified, the operators assume that the attribute takes all the bytes that remain in the XMS message.
*   * For an `XMSSource` operator, if the attribute is not the final attribute in the <native_schema> element and a length is not specified, a compile-time error occurs. For a `JMSSource` operator, if the attribute is not the final attribute in the <native_schema> element and a length is not specified, a run-time error occurs.
*   * For an `XMSSource` operator, if the length of the <attribute> element is -2, -4 or -8, the operator assumes that the data that appears in the XMS message starts with a signed 2, 4, or 8-byte length field. This length field is an integer that is encoded in the same way as any other integer attribute in the message. If the length value is incomplete, negative, or absent from the message, or there are insufficient bytes remaining in the XMS message, the operator discards the entire message and logs a run-time error.
*   * For a `JMSSource` operator, if the length of the <attribute> element is -2 or -4, the operator assume that the data that appears in the JMS message starts with a signed 2 or 4-byte length field. This length field is an integer that is encoded in the same way as any other integer attribute in the message. If the length value is incomplete, negative, or absent from the message, or there are insufficient bytes remaining in the JMS message, the operator discards the entire message and logs a run-time error.
*   * If the length of the <attribute> element is non-negative, then the operators attempt to read exactly that number of bytes from the BytesMessage. If there are insufficient bytes remaining in the XMS or JMS message, the operators discard the entire message and logs a run-time error.
*   * For an `XMSSource` operator, if the length attribute value is not a supported value, a compile-time error occurs. For a `JMSSource` operator, if the length attribute value is not a supported value, a run-time error occurs.
*
* When the message_class attribute value is `empty`:
* * The `XMSSink` operator construct an empty XMS message. The `JMSSink` operator construct an empty JMS message.  For example, you can use an empty XMS message to verify that your InfoSphere Streams application can connect to the WebSphere MQ server and that the message reaches its destination. **Note**: This message_class value cannot be used with a <native_schema> element.
* * The `XMSSource` operator expects an empty XMS message. It emits a tuple with attribute values that are assigned by the SPL program. This behavior is not supported if a <native_schema> element is defined or if there are any unassigned attributes.  The `JMSSource` operator expects an empty JMS message.
*
* When the message_class attribute value is `map`:
* * The `XMSSink` operator produces an XMS MapMessage. The `JMSSink` operator produces a JMS MapMessage. The MapMessage is a collection of name, type and value triplets. The triplets contain elements whose names and types are taken from the <native_schema> element. Their values are taken from the operator input stream.
* * The `XMSSource` operator expects an XMS MapMessage that contains elements whose names and types appear in the <native_schema> element. The `JMSSource` operator expects a JMS MapMessage that contains elements whose names and types appear in the <native_schema> element.
*   * If the schema contains an attribute which is not present in the MapMessage, the operator discards the entire message and logs a run-time error.
*   * If the MapMessage contains an attribute whose type does not match the data type in the <native_schema>, the operators attempt to convert it using the standard XMS or JMS conversion rules. If this conversion fails, the entire message is discarded and an error message is logged.
*   * If the Map Message contains an attribute with a null value, the corresponding output stream attribute is set to the default value for its type.
*   * If the MapMessage contains attributes that are not listed in the <native_schema>, the attributes are ignored.
*
* When the message_class attribute value is `stream`:
* * The `XMSSink` operator constructs an XMS StreamMessage. The `JMSSink` operator constructs a JMS StreamMessage. The StreamMessage is an ordered list of type and value pairs. The pairs contain values that are taken from the input stream. The values are serialized into the message in the order in which they are specified in the <native_schema> element. The values use the data types from the <native_schema> element.
* * The `XMSSource` operator expects an XMS StreamMessage. The `JMSSource` operator expects a JMS StreamMessage. The StreamMessage contains the values of the elements that are listed in the <native_schema> element. The values must occur in the order that is specified in the <native_schema> element. The values must also have the data types that are specified in that schema.
*   * If the operator encounters an attribute in the StreamMessage that does not have the expected data type, it attempts to convert the attribute to the data type specified by the <native_schema> element. If they conversion fails, the operator discards the entire message and logs a run-time error.
*   * If the StreamMessage contains more attributes than the <native_schema>, the attributes are ignored and a tuple is emitted.
*   * If the StreamMessage does not contain enough attributes, the operator discards the entire message and logs a run-time error.
*   * If the StreamMessage contains an attribute with a null value, the corresponding output stream attribute is set to the default value for its type.
*
* When the message_class attribute value is `wbe`:
* * The `XMSSink` operator constructs an XMS TextMessage. The `JMSSink` operator constructs a JMS TextMessage. The TextMessage contains an XML document in the WebSphere Business Events (WBE) event packet format.
*   * The XML document contains a single <connector-bundle> of type Event. The XML namespace is http://wbe.ibm.com/6.2/Event/*xxx* where *xxx* is the input stream name. The input port is used as the connector-bundle name attribute and also as a wrapper element that contains the stream attribute values.The XML document contains a field for each attribute that is listed in the <native_schema> element.
*   * **Restriction**: The blob data type is not a supported when you use the wbe message class.
*   * The `XMSSource` and the `JMSSource` operators do not support the use of the wbe message_class attribute value. If the operators encounters a message of class wbe, the operators discard the message.
*
* When the message_class attribute value is `wbe22`:
* * The `XMSSink` operator constructs an XMS TextMessage. The `JMSSink` operator constructs a JMS TextMessage. The TextMessage contains an XML document in the WebSphere Business Event 2.2 event packet format.
*    * The XML document contains a single "connector-object" (event). The input stream name is used for both the WBE event-name and event-object name. The document contains a field for each attribute that is listed in the <native_schema> element.
*    * **Restriction**: The blob data type is not supported when you use the wbe22 message class.
* * The `XMSSource` and the `JMSSource` operators do not support the use of the wbe22 message_class attribute value. If the operators encounter a message of class wbe22, the operators discard the message.
*
* When the message_class attribute value is `xml`:
* * The `XMSSink` operator constructs an XMS message that contains a generic XML message. The `JMSSink` operator constructs a JMS message that contains a generic XML message.
* * The `XMSSource` and `JMSSource` operators do not support the use of the xml message_class attribute value. If the operators encounter a message of class xml, it discards the message.
*
* If the operators encounter a message that does not match the message_class, the operators discard the message and log an error. 
* This situation happens, for example, when the message_class is set to map and the `XMSSource` operator encounters an XMS Stream message.
*
* The following is an example of the XML document that is generated for an input stream named StockCashMergerArbitrageStatus_T_SBC and a message_class value of wbe:
*
*		<connector 
*		xmlns='http://wbe.ibm.com/6.2/Event/StockCashMergerArbitrageStatus_T_SBC' 
*		name='System S' version='6.2'>
*			<connector-bundle 
*				name='StockCashMergerArbitrageStatus_T_SBC'
*				type='Event'>
*			<StockCashMergerArbitrageStatus_T_SBC'>
*			<date data-type='string'>01-FEB-2005</date>
*			<time data-type='string'>14:45:21.335</time>
*			<ratio data-type='real'>0.747079</ratio>
*			<alertType data-type='string'>IN</alertType>
*			<dayNum data-type='integer'>12815</dayNum>
*			<flag data-type='boolean'>true</flag>
*			</StockCashMergerArbitrageStatus_T_SBC'>
*			</connector-bundle>
*		</connector>
*
* The following is an example of the XML document that is generated for an input stream named iport$0 and a message_class value of wbe22:
*
*		<connector name='System S' version='2.2'>
*			<connector-bundle 
*				name='iport$0' 
*				type='Event'>
*				<connector-object name='iport$0'>
*					<field name='uintdata'>100</field>
*					<field name='somethingID'>Yes</field>
*					<field name='somethingid'>YesToo</field>
*				</connector-object>
*			</connector-bundle>
*		</connector>
*
* **Uses_connection element**
*
* A <uses_connection> element identifies a connection specification that can be used with the access specification.
*
* Here is an example of an abridged access specification that contains <uses_connection> elements:
*		<access_specification name="PersonSink">
*	        .
*	        .
*		<uses_connection connection="testSysten" />
*		<uses_connection connection="productionSystem" />
*	        .
*	        .
*	        .
*		</access_specification>
*
* The <uses_connection> element has a single attribute, connection, whose value is the name of a <connection_specification> element 
* in the same connection specifications document. An <access_specification> element must have at least one <uses_connection> element.
*
* **Native_schema element**
*
* In the Messaging Toolkit, the <native_schema> element specifies the data attributes of the data that is received from or sent to WebSphere MQ or Apache ActiveMQ. 
* For example, the <native_schema> element identifies the attribute names, data types, and optionally their length.
*
* The following example is an abridged access specification that contains a <native_schema> element:
*		<access_specification name="OutTrading">
*			<destination identifier="TestDestination"
*				delivery_mode="persistent" message_class="map" />
*			.
*			.
*			.
*			<native_schema>
*   			<attribute name="id" type="Int" />
*    			<attribute name="fname" type="String" />
*				<attribute name="lname" type="String" />
*			</native_schema>
*		</access_specification>
*
* The <native_schema> element has no attributes; it has <attribute> elements.
*
* **Attribute element**
*
* The <attribute> element specifies information about the attributes that are present in an output XMS or JMS message, or are expected in an input XMS or JMS message.
*
* The <attribute> element has three possible attributes:
* * name
*   * This mandatory attribute specifies the name by which the attribute is known in the message. The Messaging Toolkit operators use these identifiers exactly as specified to access data in the message.  For example, the operators do not change the case of the identifiers.
* * length
*   * The length attribute specifies the maximum length of the attribute. The length attribute is required only for String and Bytes data types. If the length attribute is specified for other data types, the `JMSSink` and `JMSSource` operators generate a run-time error,  and the `XMSSink` and `XMSSource` operators generate a compile-time error. For the length attribute, the operator handles data based on the message class and the data type:
*     * `JMSSource`
*       * If the message class is bytes and String data in the message is smaller than the length specified in the native schema, the message is discarded.
*       * For map and stream message classes, the length attribute has no significance.
*       * The Blob data type is not supported.
*     * `JMSSink`
*       * If the message class is bytes and String data in the tuple is smaller than the length specified in the native schema, the String data is padded with spaces to fit the length. For other message classes, the String data is written as is.
*       * If the String data in the tuple is longer than the length specified in the native schema and the message class is either map, stream, bytes, xml, wbe, or wbe22, the String data is truncated.
*       * If the message class is bytes and Bytes data in the tuple is smaller than the length specified in the native schema, the Bytes data is padded with null values to fit the length. For other message classes, the Bytes data is written as is.
*       * If the Blob data in the tuple is longer that the length specified in the native schema and the message class is either map, stream, bytes, or xml, the Blob data is truncated. For message classes wbe and wbe22, Blob data type is not supported.
*     * `XMSSource`
*       * If the message class is bytes and the String or Bytes data in the message is smaller than the length specified in the native schema, the message is discarded.
*       * If the message class is map or stream, the length attribute is ignored for String data.
*       * If the message class is map or stream and the Bytes data is in the message is smaller than the length specified in the native schema, the Bytes data is padded with null values to fit the length.
*       * If the message class is map or stream and the Bytes data is in the message is longer than the length specified in the native schema, the Bytes data is truncated to fit the length.
*     * `XMSSink`
*       * If the message class is bytes and the String data in the tuple is smaller than the length specified in the native schema, the String data is padded with spaces to fit the length. For other message classes the String data is written as is.
*       * If the String data in the tuple is longer than the length specified in the native schema and the message class is either map, stream, bytes, or xml, the String data is a truncated.
*       * If the message class is bytes and the Bytes data in the tuple is smaller than the length specified in the native schema, the Bytes data is padded with null values to fit the length. For other message classes the Bytes data is written as is.
*       * If the Blob data in the tuple is longer than the length specified in the native schema and the message class is either map, stream, bytes, or xml, the Blob data is truncated. For message classes wbe and wbe22, Blob data is not supported.
* * type
*   * This mandatory attribute specifies the data type of the attribute. The following XMS data types and corresponding SPL types, which are listed in brackets, can be used in the access specifications for the `XMSSink` and `XMSSource` operators:
*      * Byte (int8)
*      * Short(uint8, int16)
*      * Int (uint16, int32)
*      * Long (uint32, int64)
*      * Float (float32)
*	   * Double (float64)
*	   * Boolean (boolean)
*      * Bytes (blob) **Note**: The SPL type blob is not supported for message classes wbe and wbe22 by the `XMSSink` operator.
*      * String (rstring)
*  
* The following table lists the data types that can be used in the access specifications for the `JMSSink` and `JMSSource` operators. 
* It also lists the corresponding SPL types for each JMS type.
*		SPL type 	JMS type based on message class
*				map		stream		bytes		xml		wbe			wbe22
*		==============================================================================================================
*		int8		Byte		Byte		Byte		String		String			String
*		uint8 		Byte 		Byte 		Byte 		String 		String			String
*		int16 		Short 		Short 		Short 		String 		String			String
*		uint16 		Short 		Short 		Short 		String 		String			String
*		int32 		Int 		Int 		Int 		String 		String			String
*		uint32 		Int 		Int 		Int 		String 		String			String
*		int64 		Long 		Long 		Long 		String 		String			String
*		uint64 		Long 		Long 		Long 		String 		String			String
*		float32 	Float 		Float 		Float 		String 		String			String
*		float64 	Double 		Double 		Double 		String 		String			String
*		boolean 	Boolean 	Boolean 	Boolean 	String 		String			String
*		blob* 		Bytes 		Bytes 		Bytes 		String		Not supported	Not supported
*		rstring* 	String 		String 		Bytes 		String 		String			String
*		decimal32 	String 		String 		Bytes 		String 		String			String
*		decimal64 	String 		String 		Bytes 		String 		String			String
*		decimal128 	String 		String 		Bytes 		String 		String			String
*		timestamp*	String 		String 		Bytes 		String 		String			String
*		ustring 	String 		String 		Bytes 		String 		String			String
*
* **NOTE**: 
* * The blob SPL type is not supported for message classes wbe and wbe22 by the `JMSSink operator`. The Blob data type is not supported by `JMSSource` operator.
* * The information for the rstring SPL type assumes that you use UTF-8 encoding.
* * The information for the timestamp SPL type assumes that you use the 1970 UNIX epoch.
*
* The following SPL data types are not supported by the Messaging Toolkit operators:
* * enum
* * complexb
* * composite types
* * xml
*/

namespace com.ibm.streamsx.messaging.jms;


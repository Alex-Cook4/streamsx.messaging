// *******************************************************************************
// * Copyright (C)2016, International Business Machines Corporation and *
// * others. All Rights Reserved. *
// *******************************************************************************
//
namespace com.ibm.streamsx.messaging.sample.rabbitmq ;

use com.ibm.streamsx.messaging.rabbitmq::* ;

/**
 * Example of using a [RabbitMQProducer] and [RabbitMQConsumer]
 * This assumes that the topic has already been created
 * 
 */
composite RabbitMQSample
{
	param
		expression<rstring> $hostAndPort1 : "rabbitHost1:port";
		expression<rstring> $hostAndPort2 : "rabbitHost2:port";
		expression<rstring> $exchangeName : "myPhilosophicalExchange"; 
		expression<rstring> $routing_key :  "What is reality?";
	graph

		//create some messages and send to RabbitMQSink
		stream<rstring message, rstring routing_key> OutputStream = Beacon()
		{
			param
				period : 1.0 ;
			output
				OutputStream : message = "What is friendship and why do we need it?", routing_key =
					$routing_key ;
		}

		() as RabbitMQSinkOp = RabbitMQSink(OutputStream)
		{
			param
				hostAndPort : $hostAndPort1, $hostAndPort2 ;
				exchangeName : $exchangeName;
				/* You can also specify username, password, exchangeType.
				 * See SPL Docs for more details. 
				 */
		}

		stream<rstring message, rstring routing_key>  RabbitMQStream = RabbitMQSource()
		{
			param
				hostAndPort : $hostAndPort1, $hostAndPort2 ;
				exchangeName : $exchangeName;
				routingKey : $routing_key; 
				/* You can also specify username, password, exchangeType, queueName.
				 * See SPL Docs for more details. 
				 */
		}

		() as SinkOp = Custom(RabbitMQStream)
		{
			logic
				onTuple RabbitMQStream : println("Message: " +(rstring) RabbitMQStream) ;
		}

}

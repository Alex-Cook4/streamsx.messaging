// *******************************************************************************
// * Copyright (C)2014, International Business Machines Corporation and *
// * others. All Rights Reserved. *
// *******************************************************************************
//
namespace com.ibm.streamsx.messaging.sample.kafka;

use com.ibm.streamsx.messaging.kafka::*;

/**
 * Example of using a [KafkaProducer] and [KafkaConsumer]
 * This assumes that the topic has already been created
 * 
 */

composite KafkaSample {
    graph

//	  //create some messages and send to Kafka
//		stream<rstring topic, /*rstring key,*/ rstring message> OutputStream = Beacon() {
//			param
//				initDelay : 5.0;
//			output OutputStream: topic = "MyNewerTopic2", message = "****This is the time for all good men and women to come to the aid of the nation. "
//									+ "A quick brown fox jumped over the lazy dog.****" ;//, key = "abc";
//		}
//
//
//		() as KafkaSinkOp = KafkaProducer(OutputStream) {
//			param
//				propertiesFile : "etc/producer.properties";
//		}
		
		stream<rstring key, rstring message> KafkaStream = KafkaConsumer()
		{
			param
				propertiesFile : "etc/consumer.properties" ;
				topic : "myTestTopic" ;
				kafkaProperty : "group.id=newGroup" + (rstring) getTimestampInSecs();
				//partition : 0;
				//threadsPerTopic : 6;
				config
				// Fuse it with the Consumer partition.
					placement : partitionColocation("Consumer") ;
		}

		() as SinkOp = Custom(KafkaStream)
		{
		
			logic
				state :
				{
					mutable uint64 _msgCnt = 0ul ;
					mutable uint64 _lastKnownMsgCnt = 0ul ;
					mutable KafkaStream _mostRecentlyReceivedMessage = { } ;
					mutable boolean _loadTestingEnded = false ;
				}

				onTuple KafkaStream :
				{
					_msgCnt ++ ;
					// Let us keep a copy of the most recently received message in a state variable.
					// This will be used to print the very last tuple that came from the producer when
					// the entire Kafka load testing is completed.
					//
					// Activate this line only for smaller sized payloads (upto 1KB in size).
					// Beyond that, it will affect the performance due to large string copy during this assignment.
					//
					///// assignFrom(_mostRecentlyReceivedMessage, MFKT);

					// Always print the very first message.
					// After that, print only once for every 500K messages.
					if((_msgCnt == 1ul) ||((_msgCnt % 500000ul) == 0ul))
					{
						if(_msgCnt == 1ul)
						{
							appTrc(Trace.error,
								"******* START OF KAFKA LOAD TESTING (main application entry point) *******") ;
						}

						appTrc(Trace.error, "Message " +(rstring) _msgCnt + "-->" +(rstring)
							KafkaStream) ;
					}

				}


				config
				// Fuse it with the Consumer partition.
					placement : partitionColocation("Consumer") ;
			
		}
}

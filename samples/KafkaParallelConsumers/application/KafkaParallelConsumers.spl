namespace application ;

use com.ibm.streamsx.messaging.kafka::* ;
/**
 * Read from a three-partition Kafka topic using the KafkaConsumer operator in a parallel region
 * 3-wide. Kafka only guarantees ordering of tuples within a single partition. This application
 * provides the same guarantee, but since we are reading from three separate partitions, 
 * we can lose overall topic order. Depending on the key/message, order can be recovered after consuming
 * from a Kafka Server similar to how it is done here: https://developer.ibm.com/streamsdev/docs/parallelized-file-processing-parse-operator/
 * 
 * 
 * Make sure you have created your topic before launching:
 *   bin/kafka-topics.sh --create --zookeeper <zk.Host.1>:2181 --partitions 3 --topic myParallelTopic
 * 
 * Edit the consumer.properties and producer.properties files found in the etc directory to include
 * your Kafka properties. 
 * 
 * Build using Studio or the provided Makefile. 
 * 
 * Check results by looking at messagesReceived.out in the data directory. 
 * 
 */
composite ParallelConsumers
{
	graph
		//generate data to be written to a kafka server
		stream<rstring topic, rstring key, rstring message> OutputStream = Beacon()
		{
			param
				period : 0.25 ;
				initDelay : 4.0 ;
			output
				OutputStream : topic = "myParallelTopic", message =(rstring)
					IterationCount(), key =(rstring)(int32)(random() * 10.0) ;
			}
		
		//Write to Kafka Server
		() as KafkaSinkOp = KafkaProducer(OutputStream)
			{
				param
					propertiesFile : "etc/producer.properties" ;
			}

		//Read in from a kafka server with a 3-partition topic and start consistent region
		@parallel(width = 3)
		stream<rstring message, rstring key> KafkaConsumerOut = KafkaConsumer()
		{
			param
				propertiesFile : "etc/consumer.properties" ;
				topic : "myParallelTopic" ;
				partition : getChannel() ;
		}

		
		//Print out data to a file
		() as MessagePrinter = FileSink(KafkaConsumerOut)
		{
			param
				file : "messagesReceived.out" ;
				flush : 1u ;
				format : csv ;
		}

		() as JCP = JobControlPlane()
			{
			}

	}

